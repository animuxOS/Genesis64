#!/bin/bash
# This script does:
# - Kill all processes
# - move UNIONFS links
# Restart itself cleanly to ged rid of old references
# Turn on autoeject for CD-Roms
# umount everything cleanly (which is not so easy when running from CD).

PATH=/sbin:/bin:/usr/bin:/usr/sbin
export PATH

cd /

# Clean input/output
exec >/dev/console 2>&1 </dev/console

NORMAL="[0;39m"
RED="[1;31m"
GREEN="[1;32m"
YELLOW="[1;33m"
BLUE="[1;34m"
MAGENTA="[1;35m"
CYAN="[1;36m"
WHITE="[1;37m"

# Check if we are running from a Knoppix-CD or HD
INSTALLED=""
[ -e /KNOPPIX/bin/ash ] || INSTALLED=yes

case "$0" in
  *halt)
	message="
${YELLOW}KNOPPIX halted.${NORMAL}"
	command="halt"
	options="-p -d -i -f"
	;;
  *reboot)
	message="${GREEN}Preparing for reboot...${NORMAL}"
	command="reboot"
	options="-d -i -f"
	;;
  *)
	echo "$0: call this script as \"halt\" or \"reboot\" please!"
	exit 1
	;;
esac

# Kill all user processes, but let inportant services like "pump" or similar live.
# Also don't kill processes in our process group!
killprocs() {
 echo -n "${CRE}${BLUE}Killing processes with signal $((-$1)):"
 BLACKLIST="cardmgr dhcpcd dhclient init *mount pump portmap udevd"
# read process info
 read a a a a a mysid a a a a a a a a a a a a a a a a a a a sc ec relax < /proc/self/stat
 for i in /proc/[0-9]*/stat; do
  [ -f "$i" ] || continue
  read pid pname a a a psid a a a a a a a a a a a a a a a a a a a sc ec relax < "$i"
  SKIP=""
  # Skip Kernel processes
  [ "$sc" = "0" -a "$ec" = "0" ] && SKIP="true"
  # Skip processes in my session
  [ "$psid" = "$mysid" ] && SKIP="true"
  # Skip processes from blacklist
  for j in $BLACKLIST; do
   case "$pname" in \($j\)) SKIP="true" ;; esac
  done
  # Now kill them all
  if [ -n "$SKIP" ]; then
   echo -n " ${RED}$pname${NORMAL}"
  else
   echo -n " ${YELLOW}$pname${NORMAL}"
   kill $1 $pid 2>/dev/null
  fi
 done
 echo " ${BLUE}Done.${NORMAL}"
}

mysleep() {
for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
do
usleep 75000
echo -n "$1.${NORMAL}"
done
echo ""
}

killpcmcia(){
# poweroff pcmcia devices
if pidof cardmgr >/dev/null 2>&1; then
echo -n "${BLUE}Shutting down PCMCIA devices...${NORMAL}"
cardctl eject >/dev/null 2>&1 && sleep 3
killall cardmgr && sleep 3
echo ""
fi
}

# Disable kernel messages
echo "0" > /proc/sys/kernel/printk

# Read in boot parameters
CMDLINE="`cat /proc/cmdline 2>/dev/null`"
# noprompt or noeject option given?
NOPROMPT=""
case "$CMDLINE" in *noprompt*) NOPROMPT="yes"; ;; esac
NOEJECT=""
case "$CMDLINE" in *noeject*) NOEJECT="yes"; ;; esac
DEBUG=""
case "$CMDLINE" in *\ debug\ *|*BOOT_IMAGE=debug*) DEBUG="yes"; ;; esac

# KILL ALL PROCESSES
# Skip this if we are already in the second run
if [ "$1" != "restart" ]; then

# Now kill them all
killprocs -15
sleep 1
echo -n "${BLUE}Waiting for processes to finish...${NORMAL}"
mysleep "$YELLOW"

killprocs -9
sleep 1
echo -n "${BLUE}Waiting for processes to finish...${NORMAL}"
mysleep "$YELLOW"

# Unmount network filesystems first before shutting down network
NFSBUSY=""
NETMOUNTS="$(gawk '{if($1~/:/){print $2}}' /proc/mounts 2>/dev/null)"
if [ -n "$NETMOUNTS" ]; then
echo "${BLUE}Unmounting network filesystems.${NORMAL}"
# Preload programs we need later, in case we lose the network too early
swapoff --help >/dev/null 2>&1
losetup --help >/dev/null 2>&1
mount --help >/dev/null 2>&1
umount --help >/dev/null 2>&1
gawk --help >/dev/null 2>&1
tac --help >/dev/null 2>&1
# Umount NFS (if not busy)
umount -t nfs,smbfs -arv 2>/dev/null
[ "$?" != "0" ] && NFSBUSY="yes"
fi

# Shutdown network (if no active NFS mounts)
if [ -z "$NFSBUSY" ]; then
NETDEVICES="$(gawk -F: '/eth.:/{print $1}' /proc/net/dev 2>/dev/null)"
if [ -n "$NETDEVICES" ]; then
pidof pump >/dev/null 2>&1 && { pump -k ; sleep 2; }
echo -n "${BLUE}Shutting down network device${NORMAL}"
for n in $NETDEVICES; do
echo -n " ${MAGENTA}$n${NORMAL}"
ifconfig $n down
done
echo ""
fi
fi

# Umount devpts early (otherwise UNIONFS may stay busy)
umount -t devpts -a 2>/dev/null

# UNIONFS umount
if [ "$(ls -l1d /lib | gawk '{print $NF}')" = "/UNIONFS/lib" ]
then

# Create real directories for /etc and /dev on the initial ramdisk
[ -L /etc ] && rm -f /etc || mv -f /etc /etc.old
mkdir -p /etc
cp -dp /UNIONFS/etc/{inittab,init,localtime,ioctl.save,fstab,mtab} /etc/
cp -aus /KNOPPIX/etc/{init.d,rc?.d,ld.so.cache,passwd,group,shadow} /etc/

# [ -L /dev ] && rm -f /dev || mv -f /dev /dev.old
# mkdir -p /dev/pts
# cp -a /UNIONFS/dev/{console,tty[0-9]*,loop*,initctl,null} /dev/
# cp -aus /KNOPPIX/dev/* /dev/

# Remove udev's tmpfs and go back to our old file based devices on the initial ramdisk
/etc/init.d/udev stop >/dev/null 2>&1
umount -l /dev >/dev/null 2>&1

[ -L /tmp ] && rm -f /tmp || mv -f /tmp /tmp.old
mkdir -p /tmp

# Move all the symlinks back to /KNOPPIX and initrd
for i in /KNOPPIX/*; do
 case "$i" in
  /KNOPPIX/ramdisk|/KNOPPIX/tmp|/KNOPPIX/proc|/KNOPPIX/etc|/KNOPPIX/dev|/KNOPPIX/sys|/KNOPPIX/home) ;;
  *) ln -snf $i / 2>/dev/null ;;
 esac
done

# Clean up all mount references carefully, except for /cdrom and /KNOPPIX
echo -n "${BLUE}Syncing/Unmounting filesystems:"
MOUNTS="$(cat /proc/mounts | gawk '{if($2!~/^(\/KNOPPIX|\/cdrom|\/proc|\/proc\/.*|\/sys|\/)$/&&$3!~/(sysfs|procfs|usbfs)/){print $2}}' | tac)"
for mp in $MOUNTS; do
 umount -d "$mp" 2>/dev/null || { umount -r "$mp" 2>/dev/null; umount -l "$mp" 2>/dev/null; }
 [ "$?" = "0" ] && COLOR="${GREEN}" || COLOR="${RED}"
 echo -n " ${COLOR}$mp"
done
echo "${BLUE}.${NORMAL}"

# Reload init from ramdisk, thus reinit lsof fds (/etc/localtime etc.)
/etc/init u 2>/dev/null && sleep 2

# DEBUG
[ -n "$DEBUG" ] && /bin/bash

# and re-execute us to get rid of old /UNIONFS/ references
exec "$0" restart "$@"
fi
# EOF unionfs fix
else
shift # get rid of "restart"
fi
# end if ! restart

# No sync and no wtmp entry if running from CD
[ -n "$INSTALLED" ] || options="$options -n"

# turn off swap, then unmount file systems.
echo "${BLUE}Turning off swap.${NORMAL}"
# should free ramdisk space first
swapoff -a >/dev/null 2>&1

if [ -z "$NOEJECT" ]; then
# Turn on autoeject of CD-Roms
for dev in /proc/sys/dev/cdrom*/lock; do [ -f "$dev" ] && echo 0 > "$dev"; done
for dev in /proc/sys/dev/cdrom*/autoeject; do [ -f "$dev" ] && echo 1 > "$dev"; done
fi

# Turn on auto-eject feature of cdrom (2.2 kernel)
# if [ -z "$INSTALLED" ]; then
# CDROM="$(gawk '/ \/cdrom /{print $1;exit 0;}' /proc/mounts)"
# [ -n "$CDROM" ] && eject -s -a on "$CDROM" 2>/dev/null
# fi

# Note: This needs the KNOPPIX version of static "init" which contains
# the "halt" command plus rmmod/umount calls
FINALCMD="/sbin/$command"
if [ -z "$INSTALLED" ]; then
[ -L /etc/init ] && rm -f /etc/init
[ -x /etc/init ] || cp -p /KNOPPIX/sbin/init /etc/
[ -L "/etc/$command" ] && rm -f "/etc/$command"
[ -x "/etc/$command" ] || cp -p "/KNOPPIX/sbin/$command" /etc/
[ -x "/etc/$command" ] && FINALCMD="/etc/$command"
fi

# Now umount everything but root
echo "${BLUE}Unmounting remaining file systems.${NORMAL}"

# if [ -z "$INSTALLED" ]; then
#IMAGEMOUNTS="$(cat /proc/mounts | gawk '/\/KNOPPIX.IMG/{print $2}' | tac)"
#for mp in $IMAGEMOUNTS; do
#umount -vnr "$mp" 2>/dev/null
#done
# Now umount everything but system directories and /KNOPPIX, we still need it
# umount -t noiso9660,nosysfs,noproc,norootfs -ard 2>/dev/null
# fi

# Free loopback devices if necessary, so we can unmount the host media
for i in /dev/loop*; do losetup -d "$i" 2>/dev/null; done

# Remove remaining unused modules (Kernel 2.4)
rmmod -a >/dev/null 2>&1

# Now replace /etc/mtab with a symlink to /proc/mounts
# ln -snf /proc/mounts /etc/mtab 2>/dev/null

# Now we should be able to umount the rest.
umount -t notmpfs,nosysfs,noproc,nousbfs -adrvf 2>/dev/null

# For a harddisk installation: Also mount / ro
[ -n "$INSTALLED" ] && mount -n -o remount,ro / 2>/dev/null

# DEBUG
[ -n "$DEBUG" ] && /bin/bash

echo "$message"

export NOEJECT
export NOPROMPT

[ -e /cdrom/KNOPPIX/KNOPPIX ] || NOEJECT="true"

if [ -z "$NOEJECT" ]; then
 # Preload "halt" command into memory before it is gone.
 $FINALCMD --help >/dev/null 2>&1
 eject -m -p /cdrom >/dev/null 2>&1 &
 if [ -z "$NOPROMPT" ]; then
  read -s -p "${CYAN}Please remove CD, close cdrom drive and hit return [auto 2 minutes].${NORMAL}" -t 120 a </dev/console
 fi
fi

exec $FINALCMD $options
